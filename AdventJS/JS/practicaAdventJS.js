//Ejercicio 1

//En la fÃ¡brica de juguetes del Polo Norte, cada juguete tiene un nÃºmero de identificaciÃ³n Ãºnico.

/* Sin embargo, debido a un error en la mÃ¡quina de juguetes, algunos nÃºmeros se han asignado a mÃ¡s de un juguete.
Â¡Encuentra el primer nÃºmero de identificaciÃ³n que se ha repetido, donde la segunda ocurrencia tenga el Ã­ndice mÃ¡s pequeÃ±o!
En otras palabras, si hay mÃ¡s de un nÃºmero repetido, debes devolver el nÃºmero cuya segunda ocurrencia aparezca primero en la lista. Si no hay nÃºmeros repetidos, devuelve -1.*/

function findFirstRepeated(gifts) {
    const vistos = new Set();
  
    for(const num of gifts){
      if(vistos.has(num)){
        return num
      } else {
        vistos.add(num)
      }
    }
    return -1
}

const giftIds2 = [1, 2, 3, 4]
const firstRepeatedId2 = findFirstRepeated(giftIds2)



//Ejercicio 2

/*En el taller de Santa, los elfos tienen una lista de regalos que desean fabricar y un conjunto limitado de materiales.
Los regalos son cadenas de texto y los materiales son caracteres. Tu tarea es escribir una funciÃ³n que, dada una lista de regalos y los materiales disponibles, devuelva una lista de los regalos que se pueden fabricar.
Un regalo se puede fabricar si contamos con todos los materiales necesarios para fabricarlo.*/

function manufacture(gifts, materials) {
    const avableMaterials = materials.split('');
  
    let avaibleGifts = []
  
    for(const gift of gifts){
      let buildGift = true
  
      for( const letter of gift){
        if(avableMaterials.indexOf(letter) === -1){
          buildGift = false
          break
        }
      }
      if(buildGift){
        avaibleGifts.push(gift)
      }  
    }
    return avaibleGifts
}

const gifts = ["tren", "oso", "pelota"]
const materials = "tronesa"



//Ejercicio 3

/*En el taller de Santa, un elfo travieso ha estado jugando en la cadena de fabricaciÃ³n de regalos, aÃ±adiendo o eliminando un paso no planificado.
Tienes la secuencia original de pasos en la fabricaciÃ³n original y la secuencia modificada modified que puede incluir un paso extra o faltar un paso.
Tu tarea es escribir una funciÃ³n que identifique y devuelva el primer paso extra que se ha aÃ±adido o eliminado en la cadena de fabricaciÃ³n. Si no hay ninguna diferencia entre las secuencias, devuelve una cadena vacÃ­a.*/


function findNaughtyStep(original, modified) {
    const stepCount = {};
    // Contamos los pasos en la secuencia original
    for (const step of original) {
        stepCount[step] = (stepCount[step] || 0) + 1;
    }
    
    // Restamos los pasos en la secuencia modificada
    for (const step of modified) {
        if (stepCount[step]) {
            stepCount[step]--;
        } else {
            // Si no existe en original, este es el paso extra
            return step;
          }
        }
        // Buscamos si hay algÃºn paso que falte en modified
        for (const step in stepCount) {
          if (stepCount[step] > 0) {
            return step;
          }
        }

        // Si no hay diferencias
        return '';
}

const original = 'abcd'
const modified = 'abcde'



//Ejercicio 4
/* En el taller de Santa ðŸŽ…, algunos mensajes navideÃ±os han sido escritos de manera peculiar: las letras dentro de los parÃ©ntesis deben ser leÃ­das al revÃ©s
Santa necesita que estos mensajes estÃ©n correctamente formateados. Tu tarea es escribir una funciÃ³n que tome una cadena de texto y revierta los caracteres dentro de cada par de parÃ©ntesis, eliminando los parÃ©ntesis en el mensaje final.
Eso sÃ­, ten en cuenta que pueden existir parÃ©ntesis anidados, por lo que debes invertir los caracteres en el orden correcto.*/

function decode(message) {
  const stack = ['']; // Empezamos con un bloque vacÃ­o en la pila
  for (const char of message) {
    if (char === '(') {
      // AÃ±adir un nuevo bloque vacÃ­o cuando encontramos un parÃ©ntesis de apertura
      stack.push('');
    } else if (char === ')') {
      // Cuando encontramos un parÃ©ntesis de cierre, invertimos el bloque
      const reversed = stack.pop().split('').reverse().join('');
      // Y lo aÃ±adimos al bloque anterior
      stack[stack.length - 1] += reversed;
    } else {
      // Agregar el carÃ¡cter al bloque actual
      stack[stack.length - 1] += char;
    }
  }

  // El resultado final estÃ¡ en el primer bloque de la pila
  return stack[0];
}


//const a = decode('hola (odnum)')
//console.log(a) // hola mundo

//const b = decode('(olleh) (dlrow)!')
//wconsole.log(b) // hello world!

//const c = decode('sa(u(cla)atn)s')
//console.log(c) // santaclaus

// Paso a paso:
// 1. Invertimos el anidado -> sa(ualcatn)s
// 2. Invertimos el que queda -> santaclaus

